MLPROJECTTEMPLATE/
├── azure_pipelines/
│   └── azure_pipeline.yaml       # Azure DevOps pipeline configuration file
├── config/
│   ├── config.yaml               # Main configuration file for the project
│   ├── configScript.py           # Script to manage and load configurations
│   └── logging.yaml              # Logging configurations
├── data/
│   ├── interim/                  # Holds intermediate processed data
│   │   └── interim.txt           # Example placeholder file
│   ├── processed/                # Contains fully processed datasets
│   │   └── processed.txt         # Example placeholder file
│   ├── raw/                      # Raw data files
│   │   └── raw.txt               # Example placeholder file
│   └── sourceModels/             # Pretrained or external models used in the project
│       └── sourceModels.txt      # Example placeholder file
├── mlflow/
│   └── mlproject.yaml            # MLflow configuration file
├── notebooks/
│   └── test.ipynb                # Jupyter notebook for development and testing
├── preproduction/
│   ├── pp_models/                # Models used for pre-production evaluation
│   │   └── bert_01_11_2024.txt   # Example model artifact
│   └── results/                  # Results from pre-production evaluation
│       └── bert_01_11_2024_results_bert_01_12_2024.txt # Pre-production results file
├── production/
│   ├── in_production_models/     # Models currently in production
│   │   └── bert_20_11_2024.txt   # Example production model artifact
│   └── production_results/       # Results generated by production models
│       └── production_results_01_01_2025.txt # Production results file
├── scripts/
│   ├── main_pipeline/
│   │   └── main_pipeline.py      # Main pipeline entry point
│   ├── main_scripts/
│   │   ├── main_data_preprocessing.py  # Script to preprocess data
│   │   ├── main_evaluation.py          # Script for model evaluation
│   │   └── main_training.py            # Script to train models
│   └── shell_scripts/
│       ├── data_processing.sh    # Shell script for data processing
│       ├── pre_production.sh     # Shell script for pre-production tasks
│       ├── production.sh         # Shell script for production tasks
│       └── run_training.sh       # Shell script to execute training pipeline
├── src/
│   ├── data_ingestion/
│   │   ├── data_loader.py        # Module for loading data
│   │   └── data_validator.py     # Module for validating data
│   ├── data_preprocessing/
│   │   ├── data_cleaner.py       # Cleans raw data
│   │   └── feature_engineer.py   # Creates new features
│   ├── evaluation/
│   │   └── evaluator.py          # Evaluates model performance
│   ├── inference/
│   │   └── predictor.py          # Handles inference for production
│   ├── models/
│   │   ├── bert_model.py         # Implementation for BERT-based model
│   │   └── xgb_model.py          # Implementation for XGBoost-based model
│   ├── pipeline/
│   │   └── trainer.py            # Orchestrates training process
│   └── utils/
│       ├── config_loader.py      # Loads configuration files
│       └── logger.py             # Logger for standardized logging
├── tests/
│   ├── integration/
│   │   └── test_full_pipeline.py # Integration test for the pipeline
│   ├── qa/
│   │   └── test_raw_data.py      # QA checks for raw data
│   ├── unit/
│       ├── test_data_cleaner.py       # Unit test for data cleaner
│       ├── test_data_loader.py        # Unit test for data loader
│       ├── test_data_preprocessing.py # Unit test for preprocessing
│       ├── test_feature_engineering.py # Unit test for feature engineering
│       ├── test_model_evaluation.py   # Unit test for model evaluation
│       ├── test_model_inference.py    # Unit test for inference
│       └── test_model_training.py     # Unit test for training
│   └── tip/                           # Testing in production
│       ├── test_data_drift.py         # Tests for detecting data drift
│       └── test_model_performance.py  # Tests for evaluating model performance
├── tracking/
│   ├── data_versioning/
│   │   └── data_versioning.py    # Tracks data versions
│   ├── model_versioning/
│   │   └── model_versioning.py   # Tracks model versions
│   └── production_tests/
│       └── production_tests.py   # Tests for production systems
├── training_logs/
│   └── training_logs.py          # Logs training runs
├── .gitignore                    # Specifies files and directories to ignore in Git
├── Documentation.docx            # Documentation for the project
├── ML Pipeline Template Presentation.pptx # Presentation about the pipeline
├── Project_Structure.txt         # Text-based representation of this structure
├── Python coding standard.docx   # Coding standards for Python
├── README.md                     # Project overview and usage instructions
└── requirements.txt              # Python dependencies
